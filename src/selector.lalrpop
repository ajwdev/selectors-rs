use ast::{Expr, Operator, SetOperator, LabelKey, LabelValue, Selector};

// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set

grammar;

pub Selector: Selector<'input> = {
    // There is a feature request out there to add `mut` keyword to LALRPOP. Keep
    // an eye out and adjust to use .push here instead of ::combine
    <Selector> "," <Expr> => Selector::combine(<>),
    Expr => Selector::new(vec![<>]),
}

pub Expr: Expr<'input> = {
    LabelKey SetOp LabelValueGroup => Expr::SetOp(<>),
    LabelKey ExprOp LabelValue => Expr::Op(<>),
    "!" <LabelKey> => Expr::NotExists(<>),
    LabelKey => Expr::Exists(<>),
}

SetOp: SetOperator = {
    In => SetOperator::In,
    NotIn => SetOperator::NotIn,
}

ExprOp: Operator = {
    r"=?=" => Operator::Equal,
    "!=" => Operator::NotEqual,
}

pub LabelValueGroup = {
    "(" <Group<LabelValue>> ")",
}

pub LabelKey: LabelKey<'input> = {
    KeyWithPrefix => {
        // KeyWithPrefix should not allow patterns with multiple "/" so
        // this should be safe. Still a little gross though
        let groups: Vec<&str> = <>.split("/").collect();
        LabelKey::WithPrefix(groups[0], groups[1])
    },
    KeyOrValue => LabelKey::NoPrefix(<>),
    NotIn => LabelKey::NoPrefix(<>),
    In => LabelKey::NoPrefix(<>),
}

pub LabelValue: LabelValue<'input> = {
    KeyOrValue => LabelValue::Value(<>),
    NotIn => LabelValue::Value(<>),
    In => LabelValue::Value(<>),
}

Group<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

// Code related to label validation can be found below.
// https://github.com/kubernetes/apimachinery/blob/521145febf93d5639dce48a49ee8dc080863b034/pkg/util/validation/validation.go#L126
match {
    "in" => In,
    "notin" => NotIn,
} else {
    // Removes ambiguity in the parser between keys with prefixes and values/prefixless keys.
    // Example: "example.com/foo" versus just "foo"
    r"(?i)([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*){1,253}/([a-z0-9][-._a-z0-9]+[a-z0-9]){1,63}" => KeyWithPrefix,
} else {
    r"(?i)([a-z0-9]([-._a-z0-9]*[a-z0-9])?){1,63}" => KeyOrValue,
    _
}

use ast::{Expr, Operator, LabelKey, LabelValue, Selector};

// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set

grammar;

pub Selector: Selector<'input> = {
    // There is a feature request out there to add `mut` keyword to LALRPOP. Key
    // an eye out and adjust to use .append here instead of ::combine
    <s:Selector> "," <e:Expr> => Selector::combine(s, e),
    Expr => Selector::new(vec![<>]),
}

Expr: Box<Expr<'input>> = {
    <k:LabelKey> <op:ExprOp> <v:LabelValue> => Box::new(Expr::Op(k, op, v)),
    "!" <LabelKey> => Box::new(Expr::NotExists(<>)),
    LabelKey => Box::new(Expr::Exists(<>)),
};

ExprOp: Operator = {
    r"=?=" => Operator::Equal,
    "!=" => Operator::NotEqual,
};

pub LabelKey: Box<LabelKey<'input>> = {
    KeyWithPrefix => Box::new(LabelKey::WithPrefix("", <>)), // TODO
    KeyOrValue => Box::new(LabelKey::NoPrefix(<>)),
}

pub LabelValue: Box<LabelValue<'input>> = {
    KeyOrValue => Box::new(LabelValue::Value(<>)),
}

// Removes ambiquity in the parser between keys with prefixes and values/prefixless keys. 
// Example: "example.com/foo" versus just "foo"
match {
    r"(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9]){1,253}/([a-zA-Z0-9][-._a-zA-Z0-9]+[a-zA-Z0-9]){1,63}" => KeyWithPrefix
} else {
    r"([a-zA-Z0-9][-._a-zA-Z0-9]+[a-zA-Z0-9]){1,63}" => KeyOrValue,
    _
}
